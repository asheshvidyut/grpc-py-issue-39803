# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import large_message_pb2 as large__message__pb2


class LargeMessageServiceStub(object):
    """Service definition for testing large message handling
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessLargeMessage = channel.unary_unary(
                '/largemessage.LargeMessageService/ProcessLargeMessage',
                request_serializer=large__message__pb2.LargeMessage.SerializeToString,
                response_deserializer=large__message__pb2.LargeMessageResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/largemessage.LargeMessageService/HealthCheck',
                request_serializer=large__message__pb2.HealthRequest.SerializeToString,
                response_deserializer=large__message__pb2.HealthResponse.FromString,
                )


class LargeMessageServiceServicer(object):
    """Service definition for testing large message handling
    """

    def ProcessLargeMessage(self, request, context):
        """RPC method that handles large messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """RPC method for health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LargeMessageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessLargeMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessLargeMessage,
                    request_deserializer=large__message__pb2.LargeMessage.FromString,
                    response_serializer=large__message__pb2.LargeMessageResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=large__message__pb2.HealthRequest.FromString,
                    response_serializer=large__message__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'largemessage.LargeMessageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LargeMessageService(object):
    """Service definition for testing large message handling
    """

    @staticmethod
    def ProcessLargeMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/largemessage.LargeMessageService/ProcessLargeMessage',
            large__message__pb2.LargeMessage.SerializeToString,
            large__message__pb2.LargeMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/largemessage.LargeMessageService/HealthCheck',
            large__message__pb2.HealthRequest.SerializeToString,
            large__message__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
